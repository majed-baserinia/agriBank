/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/+__root";
import { Route as LayoutRouteImport } from "./routes/+_layout";
import { Route as LayoutIndexRouteImport } from "./routes/+_layout/+index";
import { Route as LayoutEnvironmentIndexRouteImport } from "./routes/+_layout/+$environment/+index";
import { Route as LayoutPlaygroundLoginIndexRouteImport } from "./routes/+_layout/+playground/+login/+index";
import { Route as LayoutPlaygroundEnvironmentIndexRouteImport } from "./routes/+_layout/+playground/+environment/+index";
import { Route as LayoutPlaygroundAppsIndexRouteImport } from "./routes/+_layout/+playground/+apps/+index";
import { Route as LayoutEnvironmentAppIndexRouteImport } from "./routes/+_layout/+$environment/+$app/+index";

const LayoutRoute = LayoutRouteImport.update({
  id: "/_layout",
  getParentRoute: () => rootRouteImport,
} as any);
const LayoutIndexRoute = LayoutIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => LayoutRoute,
} as any);
const LayoutEnvironmentIndexRoute = LayoutEnvironmentIndexRouteImport.update({
  id: "/$environment/",
  path: "/$environment/",
  getParentRoute: () => LayoutRoute,
} as any);
const LayoutPlaygroundLoginIndexRoute =
  LayoutPlaygroundLoginIndexRouteImport.update({
    id: "/playground/login/",
    path: "/playground/login/",
    getParentRoute: () => LayoutRoute,
  } as any);
const LayoutPlaygroundEnvironmentIndexRoute =
  LayoutPlaygroundEnvironmentIndexRouteImport.update({
    id: "/playground/environment/",
    path: "/playground/environment/",
    getParentRoute: () => LayoutRoute,
  } as any);
const LayoutPlaygroundAppsIndexRoute =
  LayoutPlaygroundAppsIndexRouteImport.update({
    id: "/playground/apps/",
    path: "/playground/apps/",
    getParentRoute: () => LayoutRoute,
  } as any);
const LayoutEnvironmentAppIndexRoute =
  LayoutEnvironmentAppIndexRouteImport.update({
    id: "/$environment/$app/",
    path: "/$environment/$app/",
    getParentRoute: () => LayoutRoute,
  } as any);

export interface FileRoutesByFullPath {
  "/": typeof LayoutIndexRoute;
  "/$environment": typeof LayoutEnvironmentIndexRoute;
  "/$environment/$app": typeof LayoutEnvironmentAppIndexRoute;
  "/playground/apps": typeof LayoutPlaygroundAppsIndexRoute;
  "/playground/environment": typeof LayoutPlaygroundEnvironmentIndexRoute;
  "/playground/login": typeof LayoutPlaygroundLoginIndexRoute;
}
export interface FileRoutesByTo {
  "/": typeof LayoutIndexRoute;
  "/$environment": typeof LayoutEnvironmentIndexRoute;
  "/$environment/$app": typeof LayoutEnvironmentAppIndexRoute;
  "/playground/apps": typeof LayoutPlaygroundAppsIndexRoute;
  "/playground/environment": typeof LayoutPlaygroundEnvironmentIndexRoute;
  "/playground/login": typeof LayoutPlaygroundLoginIndexRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/_layout": typeof LayoutRouteWithChildren;
  "/_layout/": typeof LayoutIndexRoute;
  "/_layout/$environment/": typeof LayoutEnvironmentIndexRoute;
  "/_layout/$environment/$app/": typeof LayoutEnvironmentAppIndexRoute;
  "/_layout/playground/apps/": typeof LayoutPlaygroundAppsIndexRoute;
  "/_layout/playground/environment/": typeof LayoutPlaygroundEnvironmentIndexRoute;
  "/_layout/playground/login/": typeof LayoutPlaygroundLoginIndexRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/$environment"
    | "/$environment/$app"
    | "/playground/apps"
    | "/playground/environment"
    | "/playground/login";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/$environment"
    | "/$environment/$app"
    | "/playground/apps"
    | "/playground/environment"
    | "/playground/login";
  id:
    | "__root__"
    | "/_layout"
    | "/_layout/"
    | "/_layout/$environment/"
    | "/_layout/$environment/$app/"
    | "/_layout/playground/apps/"
    | "/_layout/playground/environment/"
    | "/_layout/playground/login/";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/_layout": {
      id: "/_layout";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof LayoutRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/_layout/": {
      id: "/_layout/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof LayoutIndexRouteImport;
      parentRoute: typeof LayoutRoute;
    };
    "/_layout/$environment/": {
      id: "/_layout/$environment/";
      path: "/$environment";
      fullPath: "/$environment";
      preLoaderRoute: typeof LayoutEnvironmentIndexRouteImport;
      parentRoute: typeof LayoutRoute;
    };
    "/_layout/playground/login/": {
      id: "/_layout/playground/login/";
      path: "/playground/login";
      fullPath: "/playground/login";
      preLoaderRoute: typeof LayoutPlaygroundLoginIndexRouteImport;
      parentRoute: typeof LayoutRoute;
    };
    "/_layout/playground/environment/": {
      id: "/_layout/playground/environment/";
      path: "/playground/environment";
      fullPath: "/playground/environment";
      preLoaderRoute: typeof LayoutPlaygroundEnvironmentIndexRouteImport;
      parentRoute: typeof LayoutRoute;
    };
    "/_layout/playground/apps/": {
      id: "/_layout/playground/apps/";
      path: "/playground/apps";
      fullPath: "/playground/apps";
      preLoaderRoute: typeof LayoutPlaygroundAppsIndexRouteImport;
      parentRoute: typeof LayoutRoute;
    };
    "/_layout/$environment/$app/": {
      id: "/_layout/$environment/$app/";
      path: "/$environment/$app";
      fullPath: "/$environment/$app";
      preLoaderRoute: typeof LayoutEnvironmentAppIndexRouteImport;
      parentRoute: typeof LayoutRoute;
    };
  }
}

interface LayoutRouteChildren {
  LayoutIndexRoute: typeof LayoutIndexRoute;
  LayoutEnvironmentIndexRoute: typeof LayoutEnvironmentIndexRoute;
  LayoutEnvironmentAppIndexRoute: typeof LayoutEnvironmentAppIndexRoute;
  LayoutPlaygroundAppsIndexRoute: typeof LayoutPlaygroundAppsIndexRoute;
  LayoutPlaygroundEnvironmentIndexRoute: typeof LayoutPlaygroundEnvironmentIndexRoute;
  LayoutPlaygroundLoginIndexRoute: typeof LayoutPlaygroundLoginIndexRoute;
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutIndexRoute: LayoutIndexRoute,
  LayoutEnvironmentIndexRoute: LayoutEnvironmentIndexRoute,
  LayoutEnvironmentAppIndexRoute: LayoutEnvironmentAppIndexRoute,
  LayoutPlaygroundAppsIndexRoute: LayoutPlaygroundAppsIndexRoute,
  LayoutPlaygroundEnvironmentIndexRoute: LayoutPlaygroundEnvironmentIndexRoute,
  LayoutPlaygroundLoginIndexRoute: LayoutPlaygroundLoginIndexRoute,
};

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren);

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
