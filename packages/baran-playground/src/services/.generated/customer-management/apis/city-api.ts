/* tslint:disable */
/* eslint-disable */
/**
 * WebAppBlazor.Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, DEFAULT_GLOBAL_CONFIG, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AddCityCommand } from '../models';
// @ts-ignore
import type { CityOutputDto } from '../models';
// @ts-ignore
import type { RemoveCityCommand } from '../models';
// @ts-ignore
import type { UpdateCityCommand } from '../models';
/**
* 
* @param {AddCityCommand} [addCityCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementCityAddPostParamCreator (addCityCommand?: AddCityCommand, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/customer-management/City/add`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(addCityCommand, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {object} [body] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementCityGetPostParamCreator (body?: object, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/customer-management/City/get`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {RemoveCityCommand} [removeCityCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementCityRemovePostParamCreator (removeCityCommand?: RemoveCityCommand, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/customer-management/City/remove`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(removeCityCommand, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {UpdateCityCommand} [updateCityCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementCityUpdatePostParamCreator (updateCityCommand?: UpdateCityCommand, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/customer-management/City/update`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(updateCityCommand, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}


/**
* 
* @param {AddCityCommand} [addCityCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementCityAddPostFp(addCityCommand?: AddCityCommand, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
    const localVarAxiosArgs = await customerManagementCityAddPostParamCreator(addCityCommand, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CityApi.customerManagementCityAddPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {object} [body] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementCityGetPostFp(body?: object, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CityOutputDto>>> {
    const localVarAxiosArgs = await customerManagementCityGetPostParamCreator(body, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CityApi.customerManagementCityGetPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {RemoveCityCommand} [removeCityCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementCityRemovePostFp(removeCityCommand?: RemoveCityCommand, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
    const localVarAxiosArgs = await customerManagementCityRemovePostParamCreator(removeCityCommand, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CityApi.customerManagementCityRemovePost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {UpdateCityCommand} [updateCityCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementCityUpdatePostFp(updateCityCommand?: UpdateCityCommand, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
    const localVarAxiosArgs = await customerManagementCityUpdatePostParamCreator(updateCityCommand, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CityApi.customerManagementCityUpdatePost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}




/**
* 
* @param {AddCityCommand} [addCityCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementCityAddPost(addCityCommand?: AddCityCommand, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagementCityAddPostFp(addCityCommand, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {object} [body] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementCityGetPost(body?: object, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagementCityGetPostFp(body, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {RemoveCityCommand} [removeCityCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementCityRemovePost(removeCityCommand?: RemoveCityCommand, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagementCityRemovePostFp(removeCityCommand, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {UpdateCityCommand} [updateCityCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementCityUpdatePost(updateCityCommand?: UpdateCityCommand, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagementCityUpdatePostFp(updateCityCommand, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}


