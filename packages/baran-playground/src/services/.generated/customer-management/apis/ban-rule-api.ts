/* tslint:disable */
/* eslint-disable */
/**
 * WebAppBlazor.Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, DEFAULT_GLOBAL_CONFIG, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AddBanRuleActorLevelCommand } from '../models';
// @ts-ignore
import type { AddBanRuleCommand } from '../models';
// @ts-ignore
import type { AddBanRulePersonCommand } from '../models';
// @ts-ignore
import type { BanRuleDto } from '../models';
// @ts-ignore
import type { CheckBanRulePersonOutputDto } from '../models';
// @ts-ignore
import type { CheckBanRulePersonQuery } from '../models';
// @ts-ignore
import type { GetBanRuleActorLevelsOutputDtoPagedListDto } from '../models';
// @ts-ignore
import type { GetBanRuleActorLevelsQuery } from '../models';
// @ts-ignore
import type { GetBanRulePersonsOutputDtoPagedListDto } from '../models';
// @ts-ignore
import type { GetBanRulePersonsQuery } from '../models';
// @ts-ignore
import type { GetBanRulesQuery } from '../models';
// @ts-ignore
import type { GetPersonBanRuleListOutputDto } from '../models';
// @ts-ignore
import type { RemoveBanRuleActorLevelCommand } from '../models';
// @ts-ignore
import type { RemoveBanRuleCommand } from '../models';
// @ts-ignore
import type { RemoveBanRulePersonCommand } from '../models';
// @ts-ignore
import type { UpdateBanRuleCommand } from '../models';
/**
* 
* @param {AddBanRuleActorLevelCommand} [addBanRuleActorLevelCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementBanRuleAddActorLevelPostParamCreator (addBanRuleActorLevelCommand?: AddBanRuleActorLevelCommand, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/customer-management/BanRule/addActorLevel`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(addBanRuleActorLevelCommand, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {AddBanRulePersonCommand} [addBanRulePersonCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementBanRuleAddBanRulePersonPostParamCreator (addBanRulePersonCommand?: AddBanRulePersonCommand, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/customer-management/BanRule/addBanRulePerson`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(addBanRulePersonCommand, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {AddBanRuleCommand} [addBanRuleCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementBanRuleAddPostParamCreator (addBanRuleCommand?: AddBanRuleCommand, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/customer-management/BanRule/add`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(addBanRuleCommand, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {CheckBanRulePersonQuery} [checkBanRulePersonQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementBanRuleCheckbanrulepersonPostParamCreator (checkBanRulePersonQuery?: CheckBanRulePersonQuery, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/customer-management/BanRule/checkbanruleperson`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(checkBanRulePersonQuery, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {GetBanRuleActorLevelsQuery} [getBanRuleActorLevelsQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementBanRuleGetActorLevelsPostParamCreator (getBanRuleActorLevelsQuery?: GetBanRuleActorLevelsQuery, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/customer-management/BanRule/getActorLevels`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(getBanRuleActorLevelsQuery, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {GetBanRulePersonsQuery} [getBanRulePersonsQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementBanRuleGetBanRulePersonsPostParamCreator (getBanRulePersonsQuery?: GetBanRulePersonsQuery, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/customer-management/BanRule/getBanRulePersons`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(getBanRulePersonsQuery, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {string} nationalID 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementBanRuleGetPersonBanRuleListNationalIDGetParamCreator (nationalID: string, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    // verify required parameter 'nationalID' is not null or undefined
    assertParamExists('customerManagementBanRuleGetPersonBanRuleListNationalIDGet', 'nationalID', nationalID)
    const localVarPath = `/customer-management/BanRule/getPersonBanRuleList/{nationalID}`
        .replace(`{${"nationalID"}}`, encodeURIComponent(String(nationalID)));
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {GetBanRulesQuery} [getBanRulesQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementBanRuleGetPostParamCreator (getBanRulesQuery?: GetBanRulesQuery, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/customer-management/BanRule/get`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(getBanRulesQuery, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {RemoveBanRuleActorLevelCommand} [removeBanRuleActorLevelCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementBanRuleRemoveActorLevelPostParamCreator (removeBanRuleActorLevelCommand?: RemoveBanRuleActorLevelCommand, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/customer-management/BanRule/removeActorLevel`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(removeBanRuleActorLevelCommand, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {RemoveBanRulePersonCommand} [removeBanRulePersonCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementBanRuleRemoveBanRulePersonPostParamCreator (removeBanRulePersonCommand?: RemoveBanRulePersonCommand, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/customer-management/BanRule/removeBanRulePerson`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(removeBanRulePersonCommand, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {RemoveBanRuleCommand} [removeBanRuleCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementBanRuleRemovePostParamCreator (removeBanRuleCommand?: RemoveBanRuleCommand, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/customer-management/BanRule/remove`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(removeBanRuleCommand, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {UpdateBanRuleCommand} [updateBanRuleCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementBanRuleUpdatePostParamCreator (updateBanRuleCommand?: UpdateBanRuleCommand, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/customer-management/BanRule/update`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(updateBanRuleCommand, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}


/**
* 
* @param {AddBanRuleActorLevelCommand} [addBanRuleActorLevelCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementBanRuleAddActorLevelPostFp(addBanRuleActorLevelCommand?: AddBanRuleActorLevelCommand, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
    const localVarAxiosArgs = await customerManagementBanRuleAddActorLevelPostParamCreator(addBanRuleActorLevelCommand, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['BanRuleApi.customerManagementBanRuleAddActorLevelPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {AddBanRulePersonCommand} [addBanRulePersonCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementBanRuleAddBanRulePersonPostFp(addBanRulePersonCommand?: AddBanRulePersonCommand, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
    const localVarAxiosArgs = await customerManagementBanRuleAddBanRulePersonPostParamCreator(addBanRulePersonCommand, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['BanRuleApi.customerManagementBanRuleAddBanRulePersonPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {AddBanRuleCommand} [addBanRuleCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementBanRuleAddPostFp(addBanRuleCommand?: AddBanRuleCommand, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
    const localVarAxiosArgs = await customerManagementBanRuleAddPostParamCreator(addBanRuleCommand, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['BanRuleApi.customerManagementBanRuleAddPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {CheckBanRulePersonQuery} [checkBanRulePersonQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementBanRuleCheckbanrulepersonPostFp(checkBanRulePersonQuery?: CheckBanRulePersonQuery, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckBanRulePersonOutputDto>> {
    const localVarAxiosArgs = await customerManagementBanRuleCheckbanrulepersonPostParamCreator(checkBanRulePersonQuery, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['BanRuleApi.customerManagementBanRuleCheckbanrulepersonPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {GetBanRuleActorLevelsQuery} [getBanRuleActorLevelsQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementBanRuleGetActorLevelsPostFp(getBanRuleActorLevelsQuery?: GetBanRuleActorLevelsQuery, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBanRuleActorLevelsOutputDtoPagedListDto>> {
    const localVarAxiosArgs = await customerManagementBanRuleGetActorLevelsPostParamCreator(getBanRuleActorLevelsQuery, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['BanRuleApi.customerManagementBanRuleGetActorLevelsPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {GetBanRulePersonsQuery} [getBanRulePersonsQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementBanRuleGetBanRulePersonsPostFp(getBanRulePersonsQuery?: GetBanRulePersonsQuery, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBanRulePersonsOutputDtoPagedListDto>> {
    const localVarAxiosArgs = await customerManagementBanRuleGetBanRulePersonsPostParamCreator(getBanRulePersonsQuery, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['BanRuleApi.customerManagementBanRuleGetBanRulePersonsPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {string} nationalID 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementBanRuleGetPersonBanRuleListNationalIDGetFp(nationalID: string, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetPersonBanRuleListOutputDto>>> {
    const localVarAxiosArgs = await customerManagementBanRuleGetPersonBanRuleListNationalIDGetParamCreator(nationalID, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['BanRuleApi.customerManagementBanRuleGetPersonBanRuleListNationalIDGet']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {GetBanRulesQuery} [getBanRulesQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementBanRuleGetPostFp(getBanRulesQuery?: GetBanRulesQuery, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BanRuleDto>>> {
    const localVarAxiosArgs = await customerManagementBanRuleGetPostParamCreator(getBanRulesQuery, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['BanRuleApi.customerManagementBanRuleGetPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {RemoveBanRuleActorLevelCommand} [removeBanRuleActorLevelCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementBanRuleRemoveActorLevelPostFp(removeBanRuleActorLevelCommand?: RemoveBanRuleActorLevelCommand, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
    const localVarAxiosArgs = await customerManagementBanRuleRemoveActorLevelPostParamCreator(removeBanRuleActorLevelCommand, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['BanRuleApi.customerManagementBanRuleRemoveActorLevelPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {RemoveBanRulePersonCommand} [removeBanRulePersonCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementBanRuleRemoveBanRulePersonPostFp(removeBanRulePersonCommand?: RemoveBanRulePersonCommand, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
    const localVarAxiosArgs = await customerManagementBanRuleRemoveBanRulePersonPostParamCreator(removeBanRulePersonCommand, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['BanRuleApi.customerManagementBanRuleRemoveBanRulePersonPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {RemoveBanRuleCommand} [removeBanRuleCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementBanRuleRemovePostFp(removeBanRuleCommand?: RemoveBanRuleCommand, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
    const localVarAxiosArgs = await customerManagementBanRuleRemovePostParamCreator(removeBanRuleCommand, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['BanRuleApi.customerManagementBanRuleRemovePost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {UpdateBanRuleCommand} [updateBanRuleCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementBanRuleUpdatePostFp(updateBanRuleCommand?: UpdateBanRuleCommand, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
    const localVarAxiosArgs = await customerManagementBanRuleUpdatePostParamCreator(updateBanRuleCommand, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['BanRuleApi.customerManagementBanRuleUpdatePost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}




/**
* 
* @param {AddBanRuleActorLevelCommand} [addBanRuleActorLevelCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementBanRuleAddActorLevelPost(addBanRuleActorLevelCommand?: AddBanRuleActorLevelCommand, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagementBanRuleAddActorLevelPostFp(addBanRuleActorLevelCommand, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {AddBanRulePersonCommand} [addBanRulePersonCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementBanRuleAddBanRulePersonPost(addBanRulePersonCommand?: AddBanRulePersonCommand, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagementBanRuleAddBanRulePersonPostFp(addBanRulePersonCommand, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {AddBanRuleCommand} [addBanRuleCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementBanRuleAddPost(addBanRuleCommand?: AddBanRuleCommand, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagementBanRuleAddPostFp(addBanRuleCommand, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {CheckBanRulePersonQuery} [checkBanRulePersonQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementBanRuleCheckbanrulepersonPost(checkBanRulePersonQuery?: CheckBanRulePersonQuery, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagementBanRuleCheckbanrulepersonPostFp(checkBanRulePersonQuery, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {GetBanRuleActorLevelsQuery} [getBanRuleActorLevelsQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementBanRuleGetActorLevelsPost(getBanRuleActorLevelsQuery?: GetBanRuleActorLevelsQuery, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagementBanRuleGetActorLevelsPostFp(getBanRuleActorLevelsQuery, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {GetBanRulePersonsQuery} [getBanRulePersonsQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementBanRuleGetBanRulePersonsPost(getBanRulePersonsQuery?: GetBanRulePersonsQuery, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagementBanRuleGetBanRulePersonsPostFp(getBanRulePersonsQuery, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {string} nationalID 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementBanRuleGetPersonBanRuleListNationalIDGet(nationalID: string, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagementBanRuleGetPersonBanRuleListNationalIDGetFp(nationalID, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {GetBanRulesQuery} [getBanRulesQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementBanRuleGetPost(getBanRulesQuery?: GetBanRulesQuery, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagementBanRuleGetPostFp(getBanRulesQuery, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {RemoveBanRuleActorLevelCommand} [removeBanRuleActorLevelCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementBanRuleRemoveActorLevelPost(removeBanRuleActorLevelCommand?: RemoveBanRuleActorLevelCommand, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagementBanRuleRemoveActorLevelPostFp(removeBanRuleActorLevelCommand, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {RemoveBanRulePersonCommand} [removeBanRulePersonCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementBanRuleRemoveBanRulePersonPost(removeBanRulePersonCommand?: RemoveBanRulePersonCommand, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagementBanRuleRemoveBanRulePersonPostFp(removeBanRulePersonCommand, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {RemoveBanRuleCommand} [removeBanRuleCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementBanRuleRemovePost(removeBanRuleCommand?: RemoveBanRuleCommand, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagementBanRuleRemovePostFp(removeBanRuleCommand, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {UpdateBanRuleCommand} [updateBanRuleCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagementBanRuleUpdatePost(updateBanRuleCommand?: UpdateBanRuleCommand, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagementBanRuleUpdatePostFp(updateBanRuleCommand, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}


