/* tslint:disable */
/* eslint-disable */
/**
 * WebAppBlazor.Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, DEFAULT_GLOBAL_CONFIG, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AccountAndCardOutputDto } from '../models';
// @ts-ignore
import type { AccountOutputDto } from '../models';
// @ts-ignore
import type { AddAccountCommand } from '../models';
// @ts-ignore
import type { AddAliasCommand } from '../models';
// @ts-ignore
import type { AddAliasOutputDto } from '../models';
// @ts-ignore
import type { AddCardCommand } from '../models';
// @ts-ignore
import type { AddCardOutputDto } from '../models';
// @ts-ignore
import type { AddOrganizationClaimToUserCommand } from '../models';
// @ts-ignore
import type { AddPresenterCodeCommand } from '../models';
// @ts-ignore
import type { AddSignGrantedCommand } from '../models';
// @ts-ignore
import type { CardOutputDto } from '../models';
// @ts-ignore
import type { ChannelNameEnum } from '../models';
// @ts-ignore
import type { CheckAccountOutputDto } from '../models';
// @ts-ignore
import type { CheckAccountQuery } from '../models';
// @ts-ignore
import type { CheckCardOutputDto } from '../models';
// @ts-ignore
import type { CheckCardQuery } from '../models';
// @ts-ignore
import type { CheckCardValidForActivationQuery } from '../models';
// @ts-ignore
import type { CheckFacilityBelongToCustomerQuery } from '../models';
// @ts-ignore
import type { CheckOtpRegisterZeroLevelCommand } from '../models';
// @ts-ignore
import type { CheckOtpRegisterZeroLevelOutputDto } from '../models';
// @ts-ignore
import type { ConfirmRegisterZeroLevelCommand } from '../models';
// @ts-ignore
import type { ConfirmRegisterZeroLevelOutputDto } from '../models';
// @ts-ignore
import type { ConfirmUpgradeForLevelTwoCommand } from '../models';
// @ts-ignore
import type { ConfirmUpgradeForLevelTwoOutputDto } from '../models';
// @ts-ignore
import type { CusRelateToAccOutputDto } from '../models';
// @ts-ignore
import type { CustomerAccountByCifFromMainMachineOutputDto } from '../models';
// @ts-ignore
import type { CustomerCardsQurey } from '../models';
// @ts-ignore
import type { CustomerCurrentAccountsWithoutTokenQuery } from '../models';
// @ts-ignore
import type { CustomerDetailOutputDto } from '../models';
// @ts-ignore
import type { CustomerInfoForDeactivateOutputDto } from '../models';
// @ts-ignore
import type { CustomerInfoTokenOutputDto } from '../models';
// @ts-ignore
import type { CustomerOnlineAccountsQuery } from '../models';
// @ts-ignore
import type { CustomerOutputDtoPagedListDto } from '../models';
// @ts-ignore
import type { CustomerTotalInfoBySSNOutputDto } from '../models';
// @ts-ignore
import type { CustomerTotalInfoOutputDto } from '../models';
// @ts-ignore
import type { DeactivateAllChannelCommand } from '../models';
// @ts-ignore
import type { DeactivateAllOutputDto } from '../models';
// @ts-ignore
import type { DeactivateOtpOutputDto } from '../models';
// @ts-ignore
import type { DeleteAccountCommand } from '../models';
// @ts-ignore
import type { DeleteCardCommand } from '../models';
// @ts-ignore
import type { DeviceValidationIBOutputDto } from '../models';
// @ts-ignore
import type { DeviceValidationIBQuery } from '../models';
// @ts-ignore
import type { DeviceValidationOutputDto } from '../models';
// @ts-ignore
import type { DeviceValidationQuery } from '../models';
// @ts-ignore
import type { FacilityAccountOutputDto } from '../models';
// @ts-ignore
import type { GetAccountsBySignGrantedInternalQuery } from '../models';
// @ts-ignore
import type { GetCustomerAddressOutputDto } from '../models';
// @ts-ignore
import type { GetCustomerDetailForAdminQuery } from '../models';
// @ts-ignore
import type { GetCustomerForDeactivateQuery } from '../models';
// @ts-ignore
import type { GetCustomersForAdminQuery } from '../models';
// @ts-ignore
import type { GetCustomersRelatedToAccountQuery } from '../models';
// @ts-ignore
import type { GetNationalCodeOutputDto } from '../models';
// @ts-ignore
import type { GetNationalCodeQuery } from '../models';
// @ts-ignore
import type { GetSpecificClaimUsersOutputDtoPagedListDto } from '../models';
// @ts-ignore
import type { GetSpecificClaimUsersQuery } from '../models';
// @ts-ignore
import type { GetTokenQuery } from '../models';
// @ts-ignore
import type { HarimForLevelTwoAuthCommand } from '../models';
// @ts-ignore
import type { HarimForLevelTwoAuthOutputDto } from '../models';
// @ts-ignore
import type { IBCreateUserCommand } from '../models';
// @ts-ignore
import type { IBCreateUserOutputDto } from '../models';
// @ts-ignore
import type { InquiryNahabOutputDto } from '../models';
// @ts-ignore
import type { InquiryNahabQuery } from '../models';
// @ts-ignore
import type { InquiryPresenterCodeOutputDto } from '../models';
// @ts-ignore
import type { InquiryPresenterCodeQuery } from '../models';
// @ts-ignore
import type { InternalUpdateCardCommand } from '../models';
// @ts-ignore
import type { IsCustomerOwnerOfAccountQuery } from '../models';
// @ts-ignore
import type { IsLegalRelatedCustomerRelationExistOutputDto } from '../models';
// @ts-ignore
import type { IsLegalRelatedCustomerRelationExistQuery } from '../models';
// @ts-ignore
import type { LegalRelatedCustomerOutputDto } from '../models';
// @ts-ignore
import type { MobileMatchCommand } from '../models';
// @ts-ignore
import type { MobileMatchOutputDto } from '../models';
// @ts-ignore
import type { OnlineAccountOutputDto } from '../models';
// @ts-ignore
import type { PreRegisterCommand } from '../models';
// @ts-ignore
import type { PreRegisterOutputDto } from '../models';
// @ts-ignore
import type { PresentCodeOutputDto } from '../models';
// @ts-ignore
import type { RegisterCommand } from '../models';
// @ts-ignore
import type { RegisterIBCommand } from '../models';
// @ts-ignore
import type { RegisterOutputDto } from '../models';
// @ts-ignore
import type { RelatedCustomerOutputDto } from '../models';
// @ts-ignore
import type { RemoveOrganizationClaimsForUserCommand } from '../models';
// @ts-ignore
import type { RequestRegisterZeroLevelCommand } from '../models';
// @ts-ignore
import type { RequestRegisterZeroLevelOutputDto } from '../models';
// @ts-ignore
import type { RequestUpgradeForLevelTwoCommand } from '../models';
// @ts-ignore
import type { RequestUpgradeForLevelTwoOutputDto } from '../models';
// @ts-ignore
import type { SabtAhvalInquiryOutputDto } from '../models';
// @ts-ignore
import type { SabtAhvalInquiryQuery } from '../models';
// @ts-ignore
import type { SanaInquiryOutputDto } from '../models';
// @ts-ignore
import type { SanaInquiryQuery } from '../models';
// @ts-ignore
import type { SendOtpToDeactivateCommand } from '../models';
// @ts-ignore
import type { ShahkarInquiryOutputDto } from '../models';
// @ts-ignore
import type { ShahkarInquiryQuery } from '../models';
// @ts-ignore
import type { UpgradeToLevelTwoCommand } from '../models';
// @ts-ignore
import type { UpgradeToLevelTwoOutputDto } from '../models';
// @ts-ignore
import type { VerifyRegisterOtpCommand } from '../models';
// @ts-ignore
import type { VerifyRegisterOtpOutputDto } from '../models';
/**
* 
* @param {number} cifNo 
* @param {ChannelNameEnum} channel 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerAccountsCifNoChannelGetParamCreator (cifNo: number, channel: ChannelNameEnum, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    // verify required parameter 'cifNo' is not null or undefined
    assertParamExists('customerManagerAccountsCifNoChannelGet', 'cifNo', cifNo)
    // verify required parameter 'channel' is not null or undefined
    assertParamExists('customerManagerAccountsCifNoChannelGet', 'channel', channel)
    const localVarPath = `/CustomerManager/accounts/{cifNo}/{channel}`
        .replace(`{${"cifNo"}}`, encodeURIComponent(String(cifNo)))
        .replace(`{${"channel"}}`, encodeURIComponent(String(channel)));
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerAccountsGetParamCreator (options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/accounts`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {number} cifNo 
* @param {ChannelNameEnum} channel 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerAccountsandcardsCifNoChannelGetParamCreator (cifNo: number, channel: ChannelNameEnum, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    // verify required parameter 'cifNo' is not null or undefined
    assertParamExists('customerManagerAccountsandcardsCifNoChannelGet', 'cifNo', cifNo)
    // verify required parameter 'channel' is not null or undefined
    assertParamExists('customerManagerAccountsandcardsCifNoChannelGet', 'channel', channel)
    const localVarPath = `/CustomerManager/accountsandcards/{cifNo}/{channel}`
        .replace(`{${"cifNo"}}`, encodeURIComponent(String(cifNo)))
        .replace(`{${"channel"}}`, encodeURIComponent(String(channel)));
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerAccountsandcardsGetParamCreator (options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/accountsandcards`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {AddOrganizationClaimToUserCommand} [addOrganizationClaimToUserCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerAddOrganizationClaimToUserPostParamCreator (addOrganizationClaimToUserCommand?: AddOrganizationClaimToUserCommand, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/AddOrganizationClaimToUser`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(addOrganizationClaimToUserCommand, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {AddAccountCommand} [addAccountCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerAddaccountPostParamCreator (addAccountCommand?: AddAccountCommand, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/addaccount`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(addAccountCommand, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {AddSignGrantedCommand} [addSignGrantedCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerAddaccountsigngrantedPostParamCreator (addSignGrantedCommand?: AddSignGrantedCommand, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/addaccountsigngranted`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(addSignGrantedCommand, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {AddAliasCommand} [addAliasCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerAddaliastocustomerPostParamCreator (addAliasCommand?: AddAliasCommand, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/addaliastocustomer`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(addAliasCommand, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {AddCardCommand} [addCardCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerAddcardPostParamCreator (addCardCommand?: AddCardCommand, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/addcard`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(addCardCommand, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {AddPresenterCodeCommand} [addPresenterCodeCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerAddpresentercodePostParamCreator (addPresenterCodeCommand?: AddPresenterCodeCommand, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/addpresentercode`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(addPresenterCodeCommand, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {number} cifNo 
* @param {ChannelNameEnum} channel 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerCardsCifNoChannelGetParamCreator (cifNo: number, channel: ChannelNameEnum, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    // verify required parameter 'cifNo' is not null or undefined
    assertParamExists('customerManagerCardsCifNoChannelGet', 'cifNo', cifNo)
    // verify required parameter 'channel' is not null or undefined
    assertParamExists('customerManagerCardsCifNoChannelGet', 'channel', channel)
    const localVarPath = `/CustomerManager/cards/{cifNo}/{channel}`
        .replace(`{${"cifNo"}}`, encodeURIComponent(String(cifNo)))
        .replace(`{${"channel"}}`, encodeURIComponent(String(channel)));
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerCardsGetParamCreator (options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/cards`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {CustomerCardsQurey} [customerCardsQurey] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerCardsPostParamCreator (customerCardsQurey?: CustomerCardsQurey, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/cards`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(customerCardsQurey, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {CheckCardValidForActivationQuery} [checkCardValidForActivationQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerCheckcardvalidforactivationPostParamCreator (checkCardValidForActivationQuery?: CheckCardValidForActivationQuery, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/checkcardvalidforactivation`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(checkCardValidForActivationQuery, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {CheckAccountQuery} [checkAccountQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerCheckcustomeraccountsPostParamCreator (checkAccountQuery?: CheckAccountQuery, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/checkcustomeraccounts`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(checkAccountQuery, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {CheckCardQuery} [checkCardQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerCheckcustomercardPostParamCreator (checkCardQuery?: CheckCardQuery, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/checkcustomercard`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(checkCardQuery, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {CheckOtpRegisterZeroLevelCommand} [checkOtpRegisterZeroLevelCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerCheckotpzerolevelPostParamCreator (checkOtpRegisterZeroLevelCommand?: CheckOtpRegisterZeroLevelCommand, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/checkotpzerolevel`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(checkOtpRegisterZeroLevelCommand, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {ConfirmUpgradeForLevelTwoCommand} [confirmUpgradeForLevelTwoCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerConfirmupgradeleveltwoPostParamCreator (confirmUpgradeForLevelTwoCommand?: ConfirmUpgradeForLevelTwoCommand, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/confirmupgradeleveltwo`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(confirmUpgradeForLevelTwoCommand, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {ConfirmRegisterZeroLevelCommand} [confirmRegisterZeroLevelCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerConfirmzerolevelPostParamCreator (confirmRegisterZeroLevelCommand?: ConfirmRegisterZeroLevelCommand, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/confirmzerolevel`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(confirmRegisterZeroLevelCommand, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerCurrentaccountsGetParamCreator (options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/currentaccounts`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {CustomerCurrentAccountsWithoutTokenQuery} [customerCurrentAccountsWithoutTokenQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerCurrentaccountsPostParamCreator (customerCurrentAccountsWithoutTokenQuery?: CustomerCurrentAccountsWithoutTokenQuery, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/currentaccounts`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(customerCurrentAccountsWithoutTokenQuery, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {number} cifNo 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerCustomercompleteinfoCifNoGetParamCreator (cifNo: number, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    // verify required parameter 'cifNo' is not null or undefined
    assertParamExists('customerManagerCustomercompleteinfoCifNoGet', 'cifNo', cifNo)
    const localVarPath = `/CustomerManager/customercompleteinfo/{cifNo}`
        .replace(`{${"cifNo"}}`, encodeURIComponent(String(cifNo)));
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {string} ssn 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerCustomercompleteinfobyssnSsnGetParamCreator (ssn: string, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    // verify required parameter 'ssn' is not null or undefined
    assertParamExists('customerManagerCustomercompleteinfobyssnSsnGet', 'ssn', ssn)
    const localVarPath = `/CustomerManager/customercompleteinfobyssn/{ssn}`
        .replace(`{${"ssn"}}`, encodeURIComponent(String(ssn)));
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {number} cifNo 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerCustomerofflineinfoCifNoGetParamCreator (cifNo: number, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    // verify required parameter 'cifNo' is not null or undefined
    assertParamExists('customerManagerCustomerofflineinfoCifNoGet', 'cifNo', cifNo)
    const localVarPath = `/CustomerManager/customerofflineinfo/{cifNo}`
        .replace(`{${"cifNo"}}`, encodeURIComponent(String(cifNo)));
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {GetNationalCodeQuery} [getNationalCodeQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerDeacnationalcodematchingPostParamCreator (getNationalCodeQuery?: GetNationalCodeQuery, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/deacnationalcodematching`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(getNationalCodeQuery, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {DeactivateAllChannelCommand} [deactivateAllChannelCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerDeactivatecustomerinallchannelsPostParamCreator (deactivateAllChannelCommand?: DeactivateAllChannelCommand, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/deactivatecustomerinallchannels`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(deactivateAllChannelCommand, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {MobileMatchCommand} [mobileMatchCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerDeactivatecustomermobilematchingPostParamCreator (mobileMatchCommand?: MobileMatchCommand, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/deactivatecustomermobilematching`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(mobileMatchCommand, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {GetCustomerForDeactivateQuery} [getCustomerForDeactivateQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerDeactivatecustomerstartPostParamCreator (getCustomerForDeactivateQuery?: GetCustomerForDeactivateQuery, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/deactivatecustomerstart`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(getCustomerForDeactivateQuery, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {DeleteAccountCommand} [deleteAccountCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerDeleteaccountPostParamCreator (deleteAccountCommand?: DeleteAccountCommand, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/deleteaccount`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(deleteAccountCommand, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {DeleteCardCommand} [deleteCardCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerDeletecardPostParamCreator (deleteCardCommand?: DeleteCardCommand, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/deletecard`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(deleteCardCommand, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {DeviceValidationQuery} [deviceValidationQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerDevicevalidationPostParamCreator (deviceValidationQuery?: DeviceValidationQuery, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/devicevalidation`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(deviceValidationQuery, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {DeviceValidationIBQuery} [deviceValidationIBQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerDevicevalidationibPostParamCreator (deviceValidationIBQuery?: DeviceValidationIBQuery, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/devicevalidationib`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(deviceValidationIBQuery, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {GetSpecificClaimUsersQuery} [getSpecificClaimUsersQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerGetSpecificClaimUsersPostParamCreator (getSpecificClaimUsersQuery?: GetSpecificClaimUsersQuery, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/getSpecificClaimUsers`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(getSpecificClaimUsersQuery, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerGetaccountsbysigngrantedGetParamCreator (options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/getaccountsbysigngranted`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {GetAccountsBySignGrantedInternalQuery} [getAccountsBySignGrantedInternalQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerGetaccountsbysigngrantedPostParamCreator (getAccountsBySignGrantedInternalQuery?: GetAccountsBySignGrantedInternalQuery, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/getaccountsbysigngranted`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(getAccountsBySignGrantedInternalQuery, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerGetaddressGetParamCreator (options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/getaddress`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {GetCustomersForAdminQuery} [getCustomersForAdminQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerGetadminallcustomersPostParamCreator (getCustomersForAdminQuery?: GetCustomersForAdminQuery, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/getadminallcustomers`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(getCustomersForAdminQuery, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {GetCustomerDetailForAdminQuery} [getCustomerDetailForAdminQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerGetadmincustomerdetailPostParamCreator (getCustomerDetailForAdminQuery?: GetCustomerDetailForAdminQuery, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/getadmincustomerdetail`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(getCustomerDetailForAdminQuery, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {string} service 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerGetallrelatedcustomersServiceGetParamCreator (service: string, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    // verify required parameter 'service' is not null or undefined
    assertParamExists('customerManagerGetallrelatedcustomersServiceGet', 'service', service)
    const localVarPath = `/CustomerManager/getallrelatedcustomers/{service}`
        .replace(`{${"service"}}`, encodeURIComponent(String(service)));
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {GetTokenQuery} [getTokenQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerGetcustomertokenPostParamCreator (getTokenQuery?: GetTokenQuery, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/getcustomertoken`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(getTokenQuery, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerGetfacilityaccountsGetParamCreator (options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/getfacilityaccounts`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerGetlegalrelatedcustomersGetParamCreator (options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/getlegalrelatedcustomers`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerGetpresentcodeGetParamCreator (options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/getpresentcode`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {InquiryPresenterCodeQuery} [inquiryPresenterCodeQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerInquirypresentercodePostParamCreator (inquiryPresenterCodeQuery?: InquiryPresenterCodeQuery, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/inquirypresentercode`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(inquiryPresenterCodeQuery, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {InternalUpdateCardCommand} [internalUpdateCardCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerInternalupdatecardsPostParamCreator (internalUpdateCardCommand?: InternalUpdateCardCommand, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/internalupdatecards`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(internalUpdateCardCommand, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {IBCreateUserCommand} [iBCreateUserCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerInternetbankcreateuserPostParamCreator (iBCreateUserCommand?: IBCreateUserCommand, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/internetbankcreateuser`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(iBCreateUserCommand, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {IsCustomerOwnerOfAccountQuery} [isCustomerOwnerOfAccountQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerIscustomerownerofaccountPostParamCreator (isCustomerOwnerOfAccountQuery?: IsCustomerOwnerOfAccountQuery, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/iscustomerownerofaccount`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(isCustomerOwnerOfAccountQuery, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {CheckFacilityBelongToCustomerQuery} [checkFacilityBelongToCustomerQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerIsfacilityaccountbelongtocustomerPostParamCreator (checkFacilityBelongToCustomerQuery?: CheckFacilityBelongToCustomerQuery, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/isfacilityaccountbelongtocustomer`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(checkFacilityBelongToCustomerQuery, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {IsLegalRelatedCustomerRelationExistQuery} [isLegalRelatedCustomerRelationExistQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerIslegalrelatedcustomerrelationexistPostParamCreator (isLegalRelatedCustomerRelationExistQuery?: IsLegalRelatedCustomerRelationExistQuery, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/islegalrelatedcustomerrelationexist`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(isLegalRelatedCustomerRelationExistQuery, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {UpgradeToLevelTwoCommand} [upgradeToLevelTwoCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerLeveluptwobeforeloginPostParamCreator (upgradeToLevelTwoCommand?: UpgradeToLevelTwoCommand, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/leveluptwobeforelogin`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(upgradeToLevelTwoCommand, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {number} cif 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerMainmachineaccountsCifGetParamCreator (cif: number, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    // verify required parameter 'cif' is not null or undefined
    assertParamExists('customerManagerMainmachineaccountsCifGet', 'cif', cif)
    const localVarPath = `/CustomerManager/mainmachineaccounts/{cif}`
        .replace(`{${"cif"}}`, encodeURIComponent(String(cif)));
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {InquiryNahabQuery} [inquiryNahabQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerNahabinquiryPostParamCreator (inquiryNahabQuery?: InquiryNahabQuery, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/nahabinquiry`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(inquiryNahabQuery, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {CustomerOnlineAccountsQuery} [customerOnlineAccountsQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerOnlineaccountsPostParamCreator (customerOnlineAccountsQuery?: CustomerOnlineAccountsQuery, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/onlineaccounts`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(customerOnlineAccountsQuery, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {PreRegisterCommand} [preRegisterCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerPreregisterPostParamCreator (preRegisterCommand?: PreRegisterCommand, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/preregister`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(preRegisterCommand, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {RegisterCommand} [registerCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerRegisterPostParamCreator (registerCommand?: RegisterCommand, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/register`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(registerCommand, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {RegisterIBCommand} [registerIBCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerRegisteribPostParamCreator (registerIBCommand?: RegisterIBCommand, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/registerib`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(registerIBCommand, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {GetCustomersRelatedToAccountQuery} [getCustomersRelatedToAccountQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerRelatetoacccustomresPostParamCreator (getCustomersRelatedToAccountQuery?: GetCustomersRelatedToAccountQuery, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/relatetoacccustomres`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(getCustomersRelatedToAccountQuery, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {RemoveOrganizationClaimsForUserCommand} [removeOrganizationClaimsForUserCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerRemoveorganizationclaimsforuserPostParamCreator (removeOrganizationClaimsForUserCommand?: RemoveOrganizationClaimsForUserCommand, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/removeorganizationclaimsforuser`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(removeOrganizationClaimsForUserCommand, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {HarimForLevelTwoAuthCommand} [harimForLevelTwoAuthCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerReqotpleveltwobeforeloginPostParamCreator (harimForLevelTwoAuthCommand?: HarimForLevelTwoAuthCommand, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/reqotpleveltwobeforelogin`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(harimForLevelTwoAuthCommand, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {RequestUpgradeForLevelTwoCommand} [requestUpgradeForLevelTwoCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerRequestupgradeleveltwoPostParamCreator (requestUpgradeForLevelTwoCommand?: RequestUpgradeForLevelTwoCommand, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/requestupgradeleveltwo`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(requestUpgradeForLevelTwoCommand, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {RequestRegisterZeroLevelCommand} [requestRegisterZeroLevelCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerRequestzerolevelPostParamCreator (requestRegisterZeroLevelCommand?: RequestRegisterZeroLevelCommand, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/requestzerolevel`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(requestRegisterZeroLevelCommand, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {SabtAhvalInquiryQuery} [sabtAhvalInquiryQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerSabtahvalinquiryPostParamCreator (sabtAhvalInquiryQuery?: SabtAhvalInquiryQuery, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/sabtahvalinquiry`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(sabtAhvalInquiryQuery, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {SanaInquiryQuery} [sanaInquiryQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerSanainquiryPostParamCreator (sanaInquiryQuery?: SanaInquiryQuery, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/sanainquiry`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(sanaInquiryQuery, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {SendOtpToDeactivateCommand} [sendOtpToDeactivateCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerSendotptodeactivatecustomerPostParamCreator (sendOtpToDeactivateCommand?: SendOtpToDeactivateCommand, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/sendotptodeactivatecustomer`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(sendOtpToDeactivateCommand, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {ShahkarInquiryQuery} [shahkarInquiryQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerShahkarinquiryPostParamCreator (shahkarInquiryQuery?: ShahkarInquiryQuery, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/shahkarinquiry`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(shahkarInquiryQuery, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerUpdateaccountandcardsPostParamCreator (options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/updateaccountandcards`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerUpdateaccountsPostParamCreator (options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/updateaccounts`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerUpdatecardsPostParamCreator (options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/updatecards`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerUpdatefacilityaccountsPostParamCreator (options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/updatefacilityaccounts`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}

/**
* 
* @param {VerifyRegisterOtpCommand} [verifyRegisterOtpCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerVerifyregisterotpPostParamCreator (verifyRegisterOtpCommand?: VerifyRegisterOtpCommand, options: RawAxiosRequestConfig = {}, configuration?: Configuration): Promise<RequestArgs> {
    const localVarPath = `/CustomerManager/verifyregisterotp`;
    // use dummy base URL string because the URL constructor only accepts absolute URLs.
    const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
    let baseOptions;
    if (configuration) {
        baseOptions = configuration.baseOptions;
    }

    const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
    const localVarHeaderParameter = {} as any;
    const localVarQueryParameter = {} as any;

    // authentication Bearer required
    await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)



    localVarHeaderParameter['Content-Type'] = 'application/json';

    setSearchParams(localVarUrlObj, localVarQueryParameter);
    let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
    localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
    localVarRequestOptions.data = serializeDataIfNeeded(verifyRegisterOtpCommand, localVarRequestOptions, configuration)

    return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
    };
}


/**
* 
* @param {number} cifNo 
* @param {ChannelNameEnum} channel 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerAccountsCifNoChannelGetFp(cifNo: number, channel: ChannelNameEnum, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountOutputDto>>> {
    const localVarAxiosArgs = await customerManagerAccountsCifNoChannelGetParamCreator(cifNo, channel, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerAccountsCifNoChannelGet']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerAccountsGetFp(options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountOutputDto>>> {
    const localVarAxiosArgs = await customerManagerAccountsGetParamCreator(options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerAccountsGet']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {number} cifNo 
* @param {ChannelNameEnum} channel 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerAccountsandcardsCifNoChannelGetFp(cifNo: number, channel: ChannelNameEnum, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountAndCardOutputDto>> {
    const localVarAxiosArgs = await customerManagerAccountsandcardsCifNoChannelGetParamCreator(cifNo, channel, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerAccountsandcardsCifNoChannelGet']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerAccountsandcardsGetFp(options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountAndCardOutputDto>> {
    const localVarAxiosArgs = await customerManagerAccountsandcardsGetParamCreator(options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerAccountsandcardsGet']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {AddOrganizationClaimToUserCommand} [addOrganizationClaimToUserCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerAddOrganizationClaimToUserPostFp(addOrganizationClaimToUserCommand?: AddOrganizationClaimToUserCommand, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
    const localVarAxiosArgs = await customerManagerAddOrganizationClaimToUserPostParamCreator(addOrganizationClaimToUserCommand, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerAddOrganizationClaimToUserPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {AddAccountCommand} [addAccountCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerAddaccountPostFp(addAccountCommand?: AddAccountCommand, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
    const localVarAxiosArgs = await customerManagerAddaccountPostParamCreator(addAccountCommand, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerAddaccountPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {AddSignGrantedCommand} [addSignGrantedCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerAddaccountsigngrantedPostFp(addSignGrantedCommand?: AddSignGrantedCommand, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
    const localVarAxiosArgs = await customerManagerAddaccountsigngrantedPostParamCreator(addSignGrantedCommand, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerAddaccountsigngrantedPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {AddAliasCommand} [addAliasCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerAddaliastocustomerPostFp(addAliasCommand?: AddAliasCommand, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddAliasOutputDto>> {
    const localVarAxiosArgs = await customerManagerAddaliastocustomerPostParamCreator(addAliasCommand, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerAddaliastocustomerPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {AddCardCommand} [addCardCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerAddcardPostFp(addCardCommand?: AddCardCommand, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddCardOutputDto>> {
    const localVarAxiosArgs = await customerManagerAddcardPostParamCreator(addCardCommand, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerAddcardPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {AddPresenterCodeCommand} [addPresenterCodeCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerAddpresentercodePostFp(addPresenterCodeCommand?: AddPresenterCodeCommand, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
    const localVarAxiosArgs = await customerManagerAddpresentercodePostParamCreator(addPresenterCodeCommand, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerAddpresentercodePost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {number} cifNo 
* @param {ChannelNameEnum} channel 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerCardsCifNoChannelGetFp(cifNo: number, channel: ChannelNameEnum, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CardOutputDto>>> {
    const localVarAxiosArgs = await customerManagerCardsCifNoChannelGetParamCreator(cifNo, channel, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerCardsCifNoChannelGet']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerCardsGetFp(options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CardOutputDto>>> {
    const localVarAxiosArgs = await customerManagerCardsGetParamCreator(options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerCardsGet']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {CustomerCardsQurey} [customerCardsQurey] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerCardsPostFp(customerCardsQurey?: CustomerCardsQurey, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CardOutputDto>>> {
    const localVarAxiosArgs = await customerManagerCardsPostParamCreator(customerCardsQurey, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerCardsPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {CheckCardValidForActivationQuery} [checkCardValidForActivationQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerCheckcardvalidforactivationPostFp(checkCardValidForActivationQuery?: CheckCardValidForActivationQuery, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
    const localVarAxiosArgs = await customerManagerCheckcardvalidforactivationPostParamCreator(checkCardValidForActivationQuery, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerCheckcardvalidforactivationPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {CheckAccountQuery} [checkAccountQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerCheckcustomeraccountsPostFp(checkAccountQuery?: CheckAccountQuery, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CheckAccountOutputDto>>> {
    const localVarAxiosArgs = await customerManagerCheckcustomeraccountsPostParamCreator(checkAccountQuery, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerCheckcustomeraccountsPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {CheckCardQuery} [checkCardQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerCheckcustomercardPostFp(checkCardQuery?: CheckCardQuery, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckCardOutputDto>> {
    const localVarAxiosArgs = await customerManagerCheckcustomercardPostParamCreator(checkCardQuery, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerCheckcustomercardPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {CheckOtpRegisterZeroLevelCommand} [checkOtpRegisterZeroLevelCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerCheckotpzerolevelPostFp(checkOtpRegisterZeroLevelCommand?: CheckOtpRegisterZeroLevelCommand, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckOtpRegisterZeroLevelOutputDto>> {
    const localVarAxiosArgs = await customerManagerCheckotpzerolevelPostParamCreator(checkOtpRegisterZeroLevelCommand, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerCheckotpzerolevelPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {ConfirmUpgradeForLevelTwoCommand} [confirmUpgradeForLevelTwoCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerConfirmupgradeleveltwoPostFp(confirmUpgradeForLevelTwoCommand?: ConfirmUpgradeForLevelTwoCommand, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfirmUpgradeForLevelTwoOutputDto>> {
    const localVarAxiosArgs = await customerManagerConfirmupgradeleveltwoPostParamCreator(confirmUpgradeForLevelTwoCommand, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerConfirmupgradeleveltwoPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {ConfirmRegisterZeroLevelCommand} [confirmRegisterZeroLevelCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerConfirmzerolevelPostFp(confirmRegisterZeroLevelCommand?: ConfirmRegisterZeroLevelCommand, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfirmRegisterZeroLevelOutputDto>> {
    const localVarAxiosArgs = await customerManagerConfirmzerolevelPostParamCreator(confirmRegisterZeroLevelCommand, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerConfirmzerolevelPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerCurrentaccountsGetFp(options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountOutputDto>>> {
    const localVarAxiosArgs = await customerManagerCurrentaccountsGetParamCreator(options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerCurrentaccountsGet']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {CustomerCurrentAccountsWithoutTokenQuery} [customerCurrentAccountsWithoutTokenQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerCurrentaccountsPostFp(customerCurrentAccountsWithoutTokenQuery?: CustomerCurrentAccountsWithoutTokenQuery, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountOutputDto>>> {
    const localVarAxiosArgs = await customerManagerCurrentaccountsPostParamCreator(customerCurrentAccountsWithoutTokenQuery, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerCurrentaccountsPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {number} cifNo 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerCustomercompleteinfoCifNoGetFp(cifNo: number, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerTotalInfoOutputDto>> {
    const localVarAxiosArgs = await customerManagerCustomercompleteinfoCifNoGetParamCreator(cifNo, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerCustomercompleteinfoCifNoGet']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {string} ssn 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerCustomercompleteinfobyssnSsnGetFp(ssn: string, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerTotalInfoBySSNOutputDto>> {
    const localVarAxiosArgs = await customerManagerCustomercompleteinfobyssnSsnGetParamCreator(ssn, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerCustomercompleteinfobyssnSsnGet']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {number} cifNo 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerCustomerofflineinfoCifNoGetFp(cifNo: number, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerTotalInfoOutputDto>> {
    const localVarAxiosArgs = await customerManagerCustomerofflineinfoCifNoGetParamCreator(cifNo, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerCustomerofflineinfoCifNoGet']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {GetNationalCodeQuery} [getNationalCodeQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerDeacnationalcodematchingPostFp(getNationalCodeQuery?: GetNationalCodeQuery, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetNationalCodeOutputDto>> {
    const localVarAxiosArgs = await customerManagerDeacnationalcodematchingPostParamCreator(getNationalCodeQuery, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerDeacnationalcodematchingPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {DeactivateAllChannelCommand} [deactivateAllChannelCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerDeactivatecustomerinallchannelsPostFp(deactivateAllChannelCommand?: DeactivateAllChannelCommand, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeactivateAllOutputDto>> {
    const localVarAxiosArgs = await customerManagerDeactivatecustomerinallchannelsPostParamCreator(deactivateAllChannelCommand, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerDeactivatecustomerinallchannelsPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {MobileMatchCommand} [mobileMatchCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerDeactivatecustomermobilematchingPostFp(mobileMatchCommand?: MobileMatchCommand, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MobileMatchOutputDto>> {
    const localVarAxiosArgs = await customerManagerDeactivatecustomermobilematchingPostParamCreator(mobileMatchCommand, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerDeactivatecustomermobilematchingPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {GetCustomerForDeactivateQuery} [getCustomerForDeactivateQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerDeactivatecustomerstartPostFp(getCustomerForDeactivateQuery?: GetCustomerForDeactivateQuery, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerInfoForDeactivateOutputDto>> {
    const localVarAxiosArgs = await customerManagerDeactivatecustomerstartPostParamCreator(getCustomerForDeactivateQuery, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerDeactivatecustomerstartPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {DeleteAccountCommand} [deleteAccountCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerDeleteaccountPostFp(deleteAccountCommand?: DeleteAccountCommand, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
    const localVarAxiosArgs = await customerManagerDeleteaccountPostParamCreator(deleteAccountCommand, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerDeleteaccountPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {DeleteCardCommand} [deleteCardCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerDeletecardPostFp(deleteCardCommand?: DeleteCardCommand, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
    const localVarAxiosArgs = await customerManagerDeletecardPostParamCreator(deleteCardCommand, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerDeletecardPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {DeviceValidationQuery} [deviceValidationQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerDevicevalidationPostFp(deviceValidationQuery?: DeviceValidationQuery, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceValidationOutputDto>> {
    const localVarAxiosArgs = await customerManagerDevicevalidationPostParamCreator(deviceValidationQuery, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerDevicevalidationPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {DeviceValidationIBQuery} [deviceValidationIBQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerDevicevalidationibPostFp(deviceValidationIBQuery?: DeviceValidationIBQuery, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceValidationIBOutputDto>> {
    const localVarAxiosArgs = await customerManagerDevicevalidationibPostParamCreator(deviceValidationIBQuery, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerDevicevalidationibPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {GetSpecificClaimUsersQuery} [getSpecificClaimUsersQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerGetSpecificClaimUsersPostFp(getSpecificClaimUsersQuery?: GetSpecificClaimUsersQuery, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSpecificClaimUsersOutputDtoPagedListDto>> {
    const localVarAxiosArgs = await customerManagerGetSpecificClaimUsersPostParamCreator(getSpecificClaimUsersQuery, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerGetSpecificClaimUsersPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerGetaccountsbysigngrantedGetFp(options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountOutputDto>>> {
    const localVarAxiosArgs = await customerManagerGetaccountsbysigngrantedGetParamCreator(options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerGetaccountsbysigngrantedGet']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {GetAccountsBySignGrantedInternalQuery} [getAccountsBySignGrantedInternalQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerGetaccountsbysigngrantedPostFp(getAccountsBySignGrantedInternalQuery?: GetAccountsBySignGrantedInternalQuery, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountOutputDto>>> {
    const localVarAxiosArgs = await customerManagerGetaccountsbysigngrantedPostParamCreator(getAccountsBySignGrantedInternalQuery, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerGetaccountsbysigngrantedPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerGetaddressGetFp(options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCustomerAddressOutputDto>> {
    const localVarAxiosArgs = await customerManagerGetaddressGetParamCreator(options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerGetaddressGet']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {GetCustomersForAdminQuery} [getCustomersForAdminQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerGetadminallcustomersPostFp(getCustomersForAdminQuery?: GetCustomersForAdminQuery, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerOutputDtoPagedListDto>> {
    const localVarAxiosArgs = await customerManagerGetadminallcustomersPostParamCreator(getCustomersForAdminQuery, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerGetadminallcustomersPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {GetCustomerDetailForAdminQuery} [getCustomerDetailForAdminQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerGetadmincustomerdetailPostFp(getCustomerDetailForAdminQuery?: GetCustomerDetailForAdminQuery, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDetailOutputDto>> {
    const localVarAxiosArgs = await customerManagerGetadmincustomerdetailPostParamCreator(getCustomerDetailForAdminQuery, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerGetadmincustomerdetailPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {string} service 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerGetallrelatedcustomersServiceGetFp(service: string, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RelatedCustomerOutputDto>>> {
    const localVarAxiosArgs = await customerManagerGetallrelatedcustomersServiceGetParamCreator(service, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerGetallrelatedcustomersServiceGet']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {GetTokenQuery} [getTokenQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerGetcustomertokenPostFp(getTokenQuery?: GetTokenQuery, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerInfoTokenOutputDto>> {
    const localVarAxiosArgs = await customerManagerGetcustomertokenPostParamCreator(getTokenQuery, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerGetcustomertokenPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerGetfacilityaccountsGetFp(options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FacilityAccountOutputDto>>> {
    const localVarAxiosArgs = await customerManagerGetfacilityaccountsGetParamCreator(options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerGetfacilityaccountsGet']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerGetlegalrelatedcustomersGetFp(options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LegalRelatedCustomerOutputDto>>> {
    const localVarAxiosArgs = await customerManagerGetlegalrelatedcustomersGetParamCreator(options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerGetlegalrelatedcustomersGet']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerGetpresentcodeGetFp(options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PresentCodeOutputDto>> {
    const localVarAxiosArgs = await customerManagerGetpresentcodeGetParamCreator(options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerGetpresentcodeGet']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {InquiryPresenterCodeQuery} [inquiryPresenterCodeQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerInquirypresentercodePostFp(inquiryPresenterCodeQuery?: InquiryPresenterCodeQuery, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InquiryPresenterCodeOutputDto>> {
    const localVarAxiosArgs = await customerManagerInquirypresentercodePostParamCreator(inquiryPresenterCodeQuery, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerInquirypresentercodePost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {InternalUpdateCardCommand} [internalUpdateCardCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerInternalupdatecardsPostFp(internalUpdateCardCommand?: InternalUpdateCardCommand, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CardOutputDto>>> {
    const localVarAxiosArgs = await customerManagerInternalupdatecardsPostParamCreator(internalUpdateCardCommand, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerInternalupdatecardsPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {IBCreateUserCommand} [iBCreateUserCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerInternetbankcreateuserPostFp(iBCreateUserCommand?: IBCreateUserCommand, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IBCreateUserOutputDto>> {
    const localVarAxiosArgs = await customerManagerInternetbankcreateuserPostParamCreator(iBCreateUserCommand, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerInternetbankcreateuserPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {IsCustomerOwnerOfAccountQuery} [isCustomerOwnerOfAccountQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerIscustomerownerofaccountPostFp(isCustomerOwnerOfAccountQuery?: IsCustomerOwnerOfAccountQuery, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
    const localVarAxiosArgs = await customerManagerIscustomerownerofaccountPostParamCreator(isCustomerOwnerOfAccountQuery, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerIscustomerownerofaccountPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {CheckFacilityBelongToCustomerQuery} [checkFacilityBelongToCustomerQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerIsfacilityaccountbelongtocustomerPostFp(checkFacilityBelongToCustomerQuery?: CheckFacilityBelongToCustomerQuery, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
    const localVarAxiosArgs = await customerManagerIsfacilityaccountbelongtocustomerPostParamCreator(checkFacilityBelongToCustomerQuery, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerIsfacilityaccountbelongtocustomerPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {IsLegalRelatedCustomerRelationExistQuery} [isLegalRelatedCustomerRelationExistQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerIslegalrelatedcustomerrelationexistPostFp(isLegalRelatedCustomerRelationExistQuery?: IsLegalRelatedCustomerRelationExistQuery, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IsLegalRelatedCustomerRelationExistOutputDto>> {
    const localVarAxiosArgs = await customerManagerIslegalrelatedcustomerrelationexistPostParamCreator(isLegalRelatedCustomerRelationExistQuery, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerIslegalrelatedcustomerrelationexistPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {UpgradeToLevelTwoCommand} [upgradeToLevelTwoCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerLeveluptwobeforeloginPostFp(upgradeToLevelTwoCommand?: UpgradeToLevelTwoCommand, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpgradeToLevelTwoOutputDto>> {
    const localVarAxiosArgs = await customerManagerLeveluptwobeforeloginPostParamCreator(upgradeToLevelTwoCommand, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerLeveluptwobeforeloginPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {number} cif 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerMainmachineaccountsCifGetFp(cif: number, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomerAccountByCifFromMainMachineOutputDto>>> {
    const localVarAxiosArgs = await customerManagerMainmachineaccountsCifGetParamCreator(cif, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerMainmachineaccountsCifGet']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {InquiryNahabQuery} [inquiryNahabQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerNahabinquiryPostFp(inquiryNahabQuery?: InquiryNahabQuery, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InquiryNahabOutputDto>> {
    const localVarAxiosArgs = await customerManagerNahabinquiryPostParamCreator(inquiryNahabQuery, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerNahabinquiryPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {CustomerOnlineAccountsQuery} [customerOnlineAccountsQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerOnlineaccountsPostFp(customerOnlineAccountsQuery?: CustomerOnlineAccountsQuery, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OnlineAccountOutputDto>>> {
    const localVarAxiosArgs = await customerManagerOnlineaccountsPostParamCreator(customerOnlineAccountsQuery, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerOnlineaccountsPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {PreRegisterCommand} [preRegisterCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerPreregisterPostFp(preRegisterCommand?: PreRegisterCommand, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PreRegisterOutputDto>> {
    const localVarAxiosArgs = await customerManagerPreregisterPostParamCreator(preRegisterCommand, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerPreregisterPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {RegisterCommand} [registerCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerRegisterPostFp(registerCommand?: RegisterCommand, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterOutputDto>> {
    const localVarAxiosArgs = await customerManagerRegisterPostParamCreator(registerCommand, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerRegisterPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {RegisterIBCommand} [registerIBCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerRegisteribPostFp(registerIBCommand?: RegisterIBCommand, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
    const localVarAxiosArgs = await customerManagerRegisteribPostParamCreator(registerIBCommand, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerRegisteribPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {GetCustomersRelatedToAccountQuery} [getCustomersRelatedToAccountQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerRelatetoacccustomresPostFp(getCustomersRelatedToAccountQuery?: GetCustomersRelatedToAccountQuery, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CusRelateToAccOutputDto>>> {
    const localVarAxiosArgs = await customerManagerRelatetoacccustomresPostParamCreator(getCustomersRelatedToAccountQuery, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerRelatetoacccustomresPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {RemoveOrganizationClaimsForUserCommand} [removeOrganizationClaimsForUserCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerRemoveorganizationclaimsforuserPostFp(removeOrganizationClaimsForUserCommand?: RemoveOrganizationClaimsForUserCommand, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
    const localVarAxiosArgs = await customerManagerRemoveorganizationclaimsforuserPostParamCreator(removeOrganizationClaimsForUserCommand, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerRemoveorganizationclaimsforuserPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {HarimForLevelTwoAuthCommand} [harimForLevelTwoAuthCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerReqotpleveltwobeforeloginPostFp(harimForLevelTwoAuthCommand?: HarimForLevelTwoAuthCommand, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HarimForLevelTwoAuthOutputDto>> {
    const localVarAxiosArgs = await customerManagerReqotpleveltwobeforeloginPostParamCreator(harimForLevelTwoAuthCommand, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerReqotpleveltwobeforeloginPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {RequestUpgradeForLevelTwoCommand} [requestUpgradeForLevelTwoCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerRequestupgradeleveltwoPostFp(requestUpgradeForLevelTwoCommand?: RequestUpgradeForLevelTwoCommand, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestUpgradeForLevelTwoOutputDto>> {
    const localVarAxiosArgs = await customerManagerRequestupgradeleveltwoPostParamCreator(requestUpgradeForLevelTwoCommand, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerRequestupgradeleveltwoPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {RequestRegisterZeroLevelCommand} [requestRegisterZeroLevelCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerRequestzerolevelPostFp(requestRegisterZeroLevelCommand?: RequestRegisterZeroLevelCommand, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestRegisterZeroLevelOutputDto>> {
    const localVarAxiosArgs = await customerManagerRequestzerolevelPostParamCreator(requestRegisterZeroLevelCommand, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerRequestzerolevelPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {SabtAhvalInquiryQuery} [sabtAhvalInquiryQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerSabtahvalinquiryPostFp(sabtAhvalInquiryQuery?: SabtAhvalInquiryQuery, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SabtAhvalInquiryOutputDto>> {
    const localVarAxiosArgs = await customerManagerSabtahvalinquiryPostParamCreator(sabtAhvalInquiryQuery, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerSabtahvalinquiryPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {SanaInquiryQuery} [sanaInquiryQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerSanainquiryPostFp(sanaInquiryQuery?: SanaInquiryQuery, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SanaInquiryOutputDto>> {
    const localVarAxiosArgs = await customerManagerSanainquiryPostParamCreator(sanaInquiryQuery, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerSanainquiryPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {SendOtpToDeactivateCommand} [sendOtpToDeactivateCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerSendotptodeactivatecustomerPostFp(sendOtpToDeactivateCommand?: SendOtpToDeactivateCommand, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeactivateOtpOutputDto>> {
    const localVarAxiosArgs = await customerManagerSendotptodeactivatecustomerPostParamCreator(sendOtpToDeactivateCommand, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerSendotptodeactivatecustomerPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {ShahkarInquiryQuery} [shahkarInquiryQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerShahkarinquiryPostFp(shahkarInquiryQuery?: ShahkarInquiryQuery, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShahkarInquiryOutputDto>> {
    const localVarAxiosArgs = await customerManagerShahkarinquiryPostParamCreator(shahkarInquiryQuery, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerShahkarinquiryPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerUpdateaccountandcardsPostFp(options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountAndCardOutputDto>> {
    const localVarAxiosArgs = await customerManagerUpdateaccountandcardsPostParamCreator(options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerUpdateaccountandcardsPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerUpdateaccountsPostFp(options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountOutputDto>>> {
    const localVarAxiosArgs = await customerManagerUpdateaccountsPostParamCreator(options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerUpdateaccountsPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerUpdatecardsPostFp(options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CardOutputDto>>> {
    const localVarAxiosArgs = await customerManagerUpdatecardsPostParamCreator(options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerUpdatecardsPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerUpdatefacilityaccountsPostFp(options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FacilityAccountOutputDto>>> {
    const localVarAxiosArgs = await customerManagerUpdatefacilityaccountsPostParamCreator(options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerUpdatefacilityaccountsPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}

/**
* 
* @param {VerifyRegisterOtpCommand} [verifyRegisterOtpCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerVerifyregisterotpPostFp(verifyRegisterOtpCommand?: VerifyRegisterOtpCommand, options?: RawAxiosRequestConfig, configuration?: Configuration): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifyRegisterOtpOutputDto>> {
    const localVarAxiosArgs = await customerManagerVerifyregisterotpPostParamCreator(verifyRegisterOtpCommand, options,configuration);
    const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
    const localVarOperationServerBasePath = operationServerMap['CustomerManagerApi.customerManagerVerifyregisterotpPost']?.[localVarOperationServerIndex]?.url;
    return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
}




/**
* 
* @param {number} cifNo 
* @param {ChannelNameEnum} channel 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerAccountsCifNoChannelGet(cifNo: number, channel: ChannelNameEnum, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerAccountsCifNoChannelGetFp(cifNo, channel, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerAccountsGet(options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerAccountsGetFp(options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {number} cifNo 
* @param {ChannelNameEnum} channel 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerAccountsandcardsCifNoChannelGet(cifNo: number, channel: ChannelNameEnum, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerAccountsandcardsCifNoChannelGetFp(cifNo, channel, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerAccountsandcardsGet(options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerAccountsandcardsGetFp(options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {AddOrganizationClaimToUserCommand} [addOrganizationClaimToUserCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerAddOrganizationClaimToUserPost(addOrganizationClaimToUserCommand?: AddOrganizationClaimToUserCommand, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerAddOrganizationClaimToUserPostFp(addOrganizationClaimToUserCommand, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {AddAccountCommand} [addAccountCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerAddaccountPost(addAccountCommand?: AddAccountCommand, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerAddaccountPostFp(addAccountCommand, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {AddSignGrantedCommand} [addSignGrantedCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerAddaccountsigngrantedPost(addSignGrantedCommand?: AddSignGrantedCommand, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerAddaccountsigngrantedPostFp(addSignGrantedCommand, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {AddAliasCommand} [addAliasCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerAddaliastocustomerPost(addAliasCommand?: AddAliasCommand, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerAddaliastocustomerPostFp(addAliasCommand, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {AddCardCommand} [addCardCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerAddcardPost(addCardCommand?: AddCardCommand, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerAddcardPostFp(addCardCommand, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {AddPresenterCodeCommand} [addPresenterCodeCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerAddpresentercodePost(addPresenterCodeCommand?: AddPresenterCodeCommand, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerAddpresentercodePostFp(addPresenterCodeCommand, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {number} cifNo 
* @param {ChannelNameEnum} channel 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerCardsCifNoChannelGet(cifNo: number, channel: ChannelNameEnum, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerCardsCifNoChannelGetFp(cifNo, channel, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerCardsGet(options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerCardsGetFp(options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {CustomerCardsQurey} [customerCardsQurey] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerCardsPost(customerCardsQurey?: CustomerCardsQurey, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerCardsPostFp(customerCardsQurey, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {CheckCardValidForActivationQuery} [checkCardValidForActivationQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerCheckcardvalidforactivationPost(checkCardValidForActivationQuery?: CheckCardValidForActivationQuery, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerCheckcardvalidforactivationPostFp(checkCardValidForActivationQuery, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {CheckAccountQuery} [checkAccountQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerCheckcustomeraccountsPost(checkAccountQuery?: CheckAccountQuery, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerCheckcustomeraccountsPostFp(checkAccountQuery, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {CheckCardQuery} [checkCardQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerCheckcustomercardPost(checkCardQuery?: CheckCardQuery, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerCheckcustomercardPostFp(checkCardQuery, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {CheckOtpRegisterZeroLevelCommand} [checkOtpRegisterZeroLevelCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerCheckotpzerolevelPost(checkOtpRegisterZeroLevelCommand?: CheckOtpRegisterZeroLevelCommand, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerCheckotpzerolevelPostFp(checkOtpRegisterZeroLevelCommand, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {ConfirmUpgradeForLevelTwoCommand} [confirmUpgradeForLevelTwoCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerConfirmupgradeleveltwoPost(confirmUpgradeForLevelTwoCommand?: ConfirmUpgradeForLevelTwoCommand, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerConfirmupgradeleveltwoPostFp(confirmUpgradeForLevelTwoCommand, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {ConfirmRegisterZeroLevelCommand} [confirmRegisterZeroLevelCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerConfirmzerolevelPost(confirmRegisterZeroLevelCommand?: ConfirmRegisterZeroLevelCommand, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerConfirmzerolevelPostFp(confirmRegisterZeroLevelCommand, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerCurrentaccountsGet(options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerCurrentaccountsGetFp(options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {CustomerCurrentAccountsWithoutTokenQuery} [customerCurrentAccountsWithoutTokenQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerCurrentaccountsPost(customerCurrentAccountsWithoutTokenQuery?: CustomerCurrentAccountsWithoutTokenQuery, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerCurrentaccountsPostFp(customerCurrentAccountsWithoutTokenQuery, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {number} cifNo 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerCustomercompleteinfoCifNoGet(cifNo: number, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerCustomercompleteinfoCifNoGetFp(cifNo, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {string} ssn 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerCustomercompleteinfobyssnSsnGet(ssn: string, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerCustomercompleteinfobyssnSsnGetFp(ssn, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {number} cifNo 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerCustomerofflineinfoCifNoGet(cifNo: number, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerCustomerofflineinfoCifNoGetFp(cifNo, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {GetNationalCodeQuery} [getNationalCodeQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerDeacnationalcodematchingPost(getNationalCodeQuery?: GetNationalCodeQuery, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerDeacnationalcodematchingPostFp(getNationalCodeQuery, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {DeactivateAllChannelCommand} [deactivateAllChannelCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerDeactivatecustomerinallchannelsPost(deactivateAllChannelCommand?: DeactivateAllChannelCommand, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerDeactivatecustomerinallchannelsPostFp(deactivateAllChannelCommand, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {MobileMatchCommand} [mobileMatchCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerDeactivatecustomermobilematchingPost(mobileMatchCommand?: MobileMatchCommand, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerDeactivatecustomermobilematchingPostFp(mobileMatchCommand, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {GetCustomerForDeactivateQuery} [getCustomerForDeactivateQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerDeactivatecustomerstartPost(getCustomerForDeactivateQuery?: GetCustomerForDeactivateQuery, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerDeactivatecustomerstartPostFp(getCustomerForDeactivateQuery, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {DeleteAccountCommand} [deleteAccountCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerDeleteaccountPost(deleteAccountCommand?: DeleteAccountCommand, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerDeleteaccountPostFp(deleteAccountCommand, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {DeleteCardCommand} [deleteCardCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerDeletecardPost(deleteCardCommand?: DeleteCardCommand, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerDeletecardPostFp(deleteCardCommand, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {DeviceValidationQuery} [deviceValidationQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerDevicevalidationPost(deviceValidationQuery?: DeviceValidationQuery, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerDevicevalidationPostFp(deviceValidationQuery, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {DeviceValidationIBQuery} [deviceValidationIBQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerDevicevalidationibPost(deviceValidationIBQuery?: DeviceValidationIBQuery, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerDevicevalidationibPostFp(deviceValidationIBQuery, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {GetSpecificClaimUsersQuery} [getSpecificClaimUsersQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerGetSpecificClaimUsersPost(getSpecificClaimUsersQuery?: GetSpecificClaimUsersQuery, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerGetSpecificClaimUsersPostFp(getSpecificClaimUsersQuery, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerGetaccountsbysigngrantedGet(options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerGetaccountsbysigngrantedGetFp(options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {GetAccountsBySignGrantedInternalQuery} [getAccountsBySignGrantedInternalQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerGetaccountsbysigngrantedPost(getAccountsBySignGrantedInternalQuery?: GetAccountsBySignGrantedInternalQuery, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerGetaccountsbysigngrantedPostFp(getAccountsBySignGrantedInternalQuery, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerGetaddressGet(options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerGetaddressGetFp(options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {GetCustomersForAdminQuery} [getCustomersForAdminQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerGetadminallcustomersPost(getCustomersForAdminQuery?: GetCustomersForAdminQuery, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerGetadminallcustomersPostFp(getCustomersForAdminQuery, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {GetCustomerDetailForAdminQuery} [getCustomerDetailForAdminQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerGetadmincustomerdetailPost(getCustomerDetailForAdminQuery?: GetCustomerDetailForAdminQuery, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerGetadmincustomerdetailPostFp(getCustomerDetailForAdminQuery, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {string} service 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerGetallrelatedcustomersServiceGet(service: string, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerGetallrelatedcustomersServiceGetFp(service, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {GetTokenQuery} [getTokenQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerGetcustomertokenPost(getTokenQuery?: GetTokenQuery, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerGetcustomertokenPostFp(getTokenQuery, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerGetfacilityaccountsGet(options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerGetfacilityaccountsGetFp(options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerGetlegalrelatedcustomersGet(options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerGetlegalrelatedcustomersGetFp(options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerGetpresentcodeGet(options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerGetpresentcodeGetFp(options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {InquiryPresenterCodeQuery} [inquiryPresenterCodeQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerInquirypresentercodePost(inquiryPresenterCodeQuery?: InquiryPresenterCodeQuery, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerInquirypresentercodePostFp(inquiryPresenterCodeQuery, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {InternalUpdateCardCommand} [internalUpdateCardCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerInternalupdatecardsPost(internalUpdateCardCommand?: InternalUpdateCardCommand, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerInternalupdatecardsPostFp(internalUpdateCardCommand, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {IBCreateUserCommand} [iBCreateUserCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerInternetbankcreateuserPost(iBCreateUserCommand?: IBCreateUserCommand, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerInternetbankcreateuserPostFp(iBCreateUserCommand, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {IsCustomerOwnerOfAccountQuery} [isCustomerOwnerOfAccountQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerIscustomerownerofaccountPost(isCustomerOwnerOfAccountQuery?: IsCustomerOwnerOfAccountQuery, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerIscustomerownerofaccountPostFp(isCustomerOwnerOfAccountQuery, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {CheckFacilityBelongToCustomerQuery} [checkFacilityBelongToCustomerQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerIsfacilityaccountbelongtocustomerPost(checkFacilityBelongToCustomerQuery?: CheckFacilityBelongToCustomerQuery, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerIsfacilityaccountbelongtocustomerPostFp(checkFacilityBelongToCustomerQuery, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {IsLegalRelatedCustomerRelationExistQuery} [isLegalRelatedCustomerRelationExistQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerIslegalrelatedcustomerrelationexistPost(isLegalRelatedCustomerRelationExistQuery?: IsLegalRelatedCustomerRelationExistQuery, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerIslegalrelatedcustomerrelationexistPostFp(isLegalRelatedCustomerRelationExistQuery, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {UpgradeToLevelTwoCommand} [upgradeToLevelTwoCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerLeveluptwobeforeloginPost(upgradeToLevelTwoCommand?: UpgradeToLevelTwoCommand, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerLeveluptwobeforeloginPostFp(upgradeToLevelTwoCommand, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {number} cif 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerMainmachineaccountsCifGet(cif: number, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerMainmachineaccountsCifGetFp(cif, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {InquiryNahabQuery} [inquiryNahabQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerNahabinquiryPost(inquiryNahabQuery?: InquiryNahabQuery, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerNahabinquiryPostFp(inquiryNahabQuery, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {CustomerOnlineAccountsQuery} [customerOnlineAccountsQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerOnlineaccountsPost(customerOnlineAccountsQuery?: CustomerOnlineAccountsQuery, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerOnlineaccountsPostFp(customerOnlineAccountsQuery, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {PreRegisterCommand} [preRegisterCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerPreregisterPost(preRegisterCommand?: PreRegisterCommand, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerPreregisterPostFp(preRegisterCommand, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {RegisterCommand} [registerCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerRegisterPost(registerCommand?: RegisterCommand, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerRegisterPostFp(registerCommand, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {RegisterIBCommand} [registerIBCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerRegisteribPost(registerIBCommand?: RegisterIBCommand, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerRegisteribPostFp(registerIBCommand, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {GetCustomersRelatedToAccountQuery} [getCustomersRelatedToAccountQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerRelatetoacccustomresPost(getCustomersRelatedToAccountQuery?: GetCustomersRelatedToAccountQuery, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerRelatetoacccustomresPostFp(getCustomersRelatedToAccountQuery, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {RemoveOrganizationClaimsForUserCommand} [removeOrganizationClaimsForUserCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerRemoveorganizationclaimsforuserPost(removeOrganizationClaimsForUserCommand?: RemoveOrganizationClaimsForUserCommand, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerRemoveorganizationclaimsforuserPostFp(removeOrganizationClaimsForUserCommand, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {HarimForLevelTwoAuthCommand} [harimForLevelTwoAuthCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerReqotpleveltwobeforeloginPost(harimForLevelTwoAuthCommand?: HarimForLevelTwoAuthCommand, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerReqotpleveltwobeforeloginPostFp(harimForLevelTwoAuthCommand, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {RequestUpgradeForLevelTwoCommand} [requestUpgradeForLevelTwoCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerRequestupgradeleveltwoPost(requestUpgradeForLevelTwoCommand?: RequestUpgradeForLevelTwoCommand, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerRequestupgradeleveltwoPostFp(requestUpgradeForLevelTwoCommand, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {RequestRegisterZeroLevelCommand} [requestRegisterZeroLevelCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerRequestzerolevelPost(requestRegisterZeroLevelCommand?: RequestRegisterZeroLevelCommand, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerRequestzerolevelPostFp(requestRegisterZeroLevelCommand, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {SabtAhvalInquiryQuery} [sabtAhvalInquiryQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerSabtahvalinquiryPost(sabtAhvalInquiryQuery?: SabtAhvalInquiryQuery, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerSabtahvalinquiryPostFp(sabtAhvalInquiryQuery, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {SanaInquiryQuery} [sanaInquiryQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerSanainquiryPost(sanaInquiryQuery?: SanaInquiryQuery, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerSanainquiryPostFp(sanaInquiryQuery, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {SendOtpToDeactivateCommand} [sendOtpToDeactivateCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerSendotptodeactivatecustomerPost(sendOtpToDeactivateCommand?: SendOtpToDeactivateCommand, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerSendotptodeactivatecustomerPostFp(sendOtpToDeactivateCommand, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {ShahkarInquiryQuery} [shahkarInquiryQuery] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerShahkarinquiryPost(shahkarInquiryQuery?: ShahkarInquiryQuery, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerShahkarinquiryPostFp(shahkarInquiryQuery, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerUpdateaccountandcardsPost(options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerUpdateaccountandcardsPostFp(options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerUpdateaccountsPost(options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerUpdateaccountsPostFp(options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerUpdatecardsPost(options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerUpdatecardsPostFp(options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerUpdatefacilityaccountsPost(options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerUpdatefacilityaccountsPostFp(options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}

/**
* 
* @param {VerifyRegisterOtpCommand} [verifyRegisterOtpCommand] 
* @param {*} [options] Override http request option.
* @throws {RequiredError}
*/
export async function customerManagerVerifyregisterotpPost(verifyRegisterOtpCommand?: VerifyRegisterOtpCommand, options?: RawAxiosRequestConfig, configuration: Configuration = DEFAULT_GLOBAL_CONFIG) {
    return customerManagerVerifyregisterotpPostFp(verifyRegisterOtpCommand, options, configuration).then((request) => request(configuration.axiosInstance, configuration.basePath));
}


